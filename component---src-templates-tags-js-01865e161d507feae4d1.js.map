{"version":3,"file":"component---src-templates-tags-js-01865e161d507feae4d1.js","mappings":"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","sources":["webpack://markrox.dev/./src/components/Seo.jsx","webpack://markrox.dev/./src/components/TagList.jsx","webpack://markrox.dev/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description = '' , lang = 'en', meta = [], image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} - %s`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: \"keywords\",\n          content: site.siteMetadata.keywords.join(\",\"),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default Seo\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst TagList = ({ tags }) => {\n    return (\n        tags.map((tag, i) => {\n                let tagLink = \"/tags/\" + kebabCase(tag);\n                return <span key={i} >{(i ? ', ' : '')}<a href={tagLink}>{ tag }</a></span>\n            }\n        )\n    )\n}\n\nexport default TagList","import React from \"react\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/Seo\"\nimport TagList from \"../components/TagList\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data }) => {\n    const { tag } = pageContext\n    const { edges, totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${totalCount === 1 ? \"\" : \"s\"\n        } tagged with \"${tag}\"`\n\n    return (\n        <Layout>\n            <Seo title={tag} />\n            <section>\n                <h1><FontAwesomeIcon icon={['fas', 'tags']} />&nbsp;&nbsp;{tagHeader}</h1>\n                <div className=\"flexbox\">\n                    {edges.map(({ node }, i) => {\n\n                        const postImage = node.frontmatter.postimage\n\n                        return (\n                            <div key={node.fields.slug + i.toString()}>\n                                <Link to={node.fields.slug}><h1 className=\"postTitle\">{node.frontmatter.title}</h1></Link>\n                                <div className=\"postedInfo\">posted on {node.frontmatter.date} | tags: [ <TagList tags= { node.frontmatter.tags } /> ]</div>\n                                <Link to={node.fields.slug}>\n                                    {postImage && postImage.src && (\n                                        <div className=\"postImage\">\n                                            <GatsbyImage\n                                                image={postImage.src.childImageSharp.gatsbyImageData}\n                                                alt={postImage.alt}\n                                                layout=\"fullWidth\"\n                                            />\n                                            <div className=\"overlay\">\n                                                <div className=\"innerOverlayText\" dangerouslySetInnerHTML={{__html: node.frontmatter.excerpt }}></div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </Link>\n                            </div>\n                        )\n                    })}\n                </div>\n                {/* <ul>\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul> */}\n                {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n                {/* <Link to=\"/tags\">All tags</Link> */}\n            </section>\n        </Layout>\n    )\n}\n\nTags.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                        fields: PropTypes.shape({\n                            slug: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const query = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: {frontmatter: {date: DESC}}\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          frontmatter {\n              title\n              subtitle\n              date(formatString: \"LL\")\n              author\n              excerpt\n              featured\n              tags\n              postimage\n              {\n                alt\n                src {\n                  absolutePath\n                  childImageSharp {\n                      gatsbyImageData(\n                        layout: FULL_WIDTH\n                        placeholder: BLURRED\n                        formats: [AUTO, WEBP, AVIF]\n                      )\n                  }\n                }\n              }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\nexport default Tags\n"],"names":["_ref","description","lang","meta","image","metaImage","title","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","React","Helmet","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","tags","map","tag","i","tagLink","kebabCase","key","pageContext","data","edges","totalCount","allMarkdownRemark","tagHeader","Layout","Seo","FontAwesomeIcon","icon","className","_ref2","node","postImage","frontmatter","postimage","fields","slug","toString","Link","to","date","TagList","GatsbyImage","childImageSharp","gatsbyImageData","alt","layout","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}