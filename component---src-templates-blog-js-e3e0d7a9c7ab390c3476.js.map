{"version":3,"file":"component---src-templates-blog-js-e3e0d7a9c7ab390c3476.js","mappings":"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","sources":["webpack://markrox.dev/./src/components/Seo.jsx","webpack://markrox.dev/./src/components/TagList.jsx","webpack://markrox.dev/./src/templates/blog.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description = '' , lang = 'en', meta = [], image: metaImage, title, pathname }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            keywords\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image =\n    metaImage && metaImage.src\n      ? `${site.siteMetadata.siteUrl}${metaImage.src}`\n      : null\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`${site.siteMetadata.title} - %s`}\n      link={\n        canonical\n          ? [\n              {\n                rel: \"canonical\",\n                href: canonical,\n              },\n            ]\n          : []\n      }\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: \"keywords\",\n          content: site.siteMetadata.keywords.join(\",\"),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          metaImage\n            ? [\n                {\n                  property: \"og:image\",\n                  content: image,\n                },\n                {\n                  property: \"og:image:width\",\n                  content: metaImage.width,\n                },\n                {\n                  property: \"og:image:height\",\n                  content: metaImage.height,\n                },\n                {\n                  name: \"twitter:card\",\n                  content: \"summary_large_image\",\n                },\n              ]\n            : [\n                {\n                  name: \"twitter:card\",\n                  content: \"summary\",\n                },\n              ]\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n  image: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n  }),\n  pathname: PropTypes.string,\n}\n\nexport default Seo\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash/kebabCase\"\n\nconst TagList = ({ tags }) => {\n    return (\n        tags.map((tag, i) => {\n                let tagLink = \"/tags/\" + kebabCase(tag);\n                return <span key={i} >{(i ? ', ' : '')}<a href={tagLink}>{ tag }</a></span>\n            }\n        )\n    )\n}\n\nexport default TagList","import React from 'react'\nimport Layout from '../components/Layout'\nimport Seo from '../components/Seo'\nimport TagList from \"../components/TagList\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport { graphql } from 'gatsby'\n\nconst Blog = (props) => {\n    \n    const post = props.data.markdownRemark\n    const postImage = post.frontmatter.postimage\n    // const seoImage = null;\n    const seoImage = postImage && postImage.src\n    ? postImage.src.childImageSharp.resize\n    : null\n    const pathName = props.location.pathname\n\n\n    return (\n\n        <Layout>\n            <Seo           \n                title={post.frontmatter.title}\n                description={post.frontmatter.description || post.excerpt}\n                image={seoImage}\n                pathname={pathName}>\n            </Seo>\n            <section>\n                <h1 className=\"postTitle\">{post.frontmatter.title}</h1>\n                <div className=\"postedInfo\">posted on {post.frontmatter.date}  | tags: [ <TagList tags= { post.frontmatter.tags } /> ]</div>\n                {/* by {post.frontmatter.author}</div> */}\n\n                {\n                    postImage && postImage.src && (\n                        <blockquote className=\"postQuote\" dangerouslySetInnerHTML={{__html: post.frontmatter.subtitle }}></blockquote>\n                    )\n                }\n                {\n                    postImage && postImage.src && (\n                        <div className=\"postImage\">\n                            <GatsbyImage\n                            image={postImage.src.childImageSharp.gatsbyImageData}\n                            alt={postImage.alt}\n                            layout=\"fullWidth\"\n                            formats={[\"auto\",\"webp\"]}\n                            />\n                            <div className=\"overlay\">\n                                <div className=\"innerOverlayText\" dangerouslySetInnerHTML={{__html: post.frontmatter.excerpt }}></div>\n                            </div>\n                        </div>\n                    )\n\n                }\n\n                <div className=\"blogBody\" dangerouslySetInnerHTML={{__html: post.html}}></div>\n\n                <div className=\"disclaimer\">This post and/or images used in it may have been created or enhanced using generative AI tools for clarity and organization. However, all ideas, technical work, solutions, integrations, and other aspects described here are entirely my own.</div>\n            </section>        \n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    query($slug: String!) {\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n        excerpt\n        id\n        frontmatter {\n            title\n            subtitle\n            excerpt\n            date(formatString: \"LL\")\n            author\n            featured\n            tags\n            postimage\n            {\n              alt\n              src {\n                absolutePath\n                childImageSharp {\n                    gatsbyImageData(\n                        layout: FULL_WIDTH\n                        placeholder: BLURRED\n                        formats: [AUTO, WEBP, AVIF]\n                    )\n                    resize(width: 1200) {\n                        src\n                        height\n                        width\n                      }\n                }\n              }\n            }\n        }\n        html\n        }\n    }\n`\n\nexport default Blog"],"names":["_ref","description","lang","meta","image","metaImage","title","pathname","site","useStaticQuery","metaDescription","siteMetadata","src","siteUrl","canonical","React","Helmet","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","tags","map","tag","i","tagLink","kebabCase","key","props","post","data","markdownRemark","postImage","frontmatter","postimage","seoImage","childImageSharp","resize","pathName","location","Layout","Seo","excerpt","className","date","TagList","dangerouslySetInnerHTML","__html","subtitle","GatsbyImage","gatsbyImageData","alt","layout","formats","html"],"sourceRoot":""}